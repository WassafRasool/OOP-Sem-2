#include <iostream>
#include <string>
using namespace std;

class Account {
protected:
    string accountNumber;
    double balance;
    string accountHolderName;
    string accountType;

public:
    Account(string accNum, string holderName, double bal, string type = "") 
        : accountNumber(accNum), accountHolderName(holderName), balance(bal), accountType(type) {}

    virtual void deposit(double amount) {
        balance += amount;
    }

    virtual void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
        } else {
            cout << "Insufficient funds" << endl;
        }
    }

    virtual void calculateInterest() {
        cout << "Interest calculation not defined for this account type." << endl;
    }

    virtual void printStatement() {
        cout << "Account Number: " << accountNumber << endl;
        cout << "Account Holder: " << accountHolderName << endl;
        cout << "Balance: $" << balance << endl;
    }

    virtual void getAccountInfo() {
        cout << "Account Info: " << accountNumber << ", " << accountHolderName << ", Balance: $" << balance << endl;
    }
};

class SavingsAccount : public Account {
private:
    double interestRate;

public:
    SavingsAccount(string accNum, string holderName, double bal, double rate) 
        : Account(accNum, holderName, bal, "Savings"), interestRate(rate) {}

    void calculateInterest() override {
        double interest = balance * interestRate / 100;
        cout << "Interest for Savings Account: $" << interest << endl;
    }

    void printStatement() override {
        Account::printStatement();
        cout << "Account Type: Savings" << endl;
        cout << "Interest Rate: " << interestRate << "%" << endl;
    }

    void withdraw(double amount) override {
        if (balance - amount < 0) {
            cout << "Insufficient funds for withdrawal in Savings Account" << endl;
        } else {
            balance -= amount;
        }
    }
};

class CheckingAccount : public Account {
private:
    double minimumBalance;

public:
    CheckingAccount(string accNum, string holderName, double bal, double minBalance) 
        : Account(accNum, holderName, bal, "Checking"), minimumBalance(minBalance) {}

    void calculateInterest() override {
        cout << "Checking Accounts do not earn interest." << endl;
    }

    void printStatement() override {
        Account::printStatement();
        cout << "Account Type: Checking" << endl;
        cout << "Minimum Balance: $" << minimumBalance << endl;
    }

    void withdraw(double amount) override {
        if (balance - amount < minimumBalance) {
            cout << "Cannot withdraw below minimum balance in Checking Account" << endl;
        } else {
            balance -= amount;
        }
    }
};

class FixedDepositAccount : public Account {
private:
    double fixedInterestRate;
    string maturityDate;

public:
    FixedDepositAccount(string accNum, string holderName, double bal, double rate, string maturity) 
        : Account(accNum, holderName, bal, "Fixed Deposit"), fixedInterestRate(rate), maturityDate(maturity) {}

    void calculateInterest() override {
        double interest = balance * fixedInterestRate / 100;
        cout << "Interest for Fixed Deposit Account: $" << interest << endl;
    }

    void printStatement() override {
        Account::printStatement();
        cout << "Account Type: Fixed Deposit" << endl;
        cout << "Interest Rate: " << fixedInterestRate << "%" << endl;
        cout << "Maturity Date: " << maturityDate << endl;
    }

    void withdraw(double amount) override {
        cout << "Withdrawals are not allowed until maturity in Fixed Deposit Account." << endl;
    }
};

int main() {
    SavingsAccount account1("12345", "Alice", 1000.0, 3.5);
    CheckingAccount account2("67890", "Bob", 500.0, 100.0);
    FixedDepositAccount account3("11223", "Charlie", 5000.0, 5.0, "2026-12-31");

    account1.deposit(200.0);
    account1.calculateInterest();
    account1.printStatement();

    account2.withdraw(150.0);
    account2.calculateInterest();
    account2.printStatement();

    account3.calculateInterest();
    account3.printStatement();

    return 0;
}
