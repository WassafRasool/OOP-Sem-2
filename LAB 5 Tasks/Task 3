#include <iostream>
#include <string>
using namespace std;
class Professor {
public:
    string name;
    string department;
    Professor(string name, string department) {
        this->name = name;
        this->department = department;
    }
};
class University {
private:
    Professor **professors;
    int professorCount;
public:
    University() {
        professors = nullptr;
        professorCount = 0;
    }
    void addProfessor(string name, string department) {
        Professor *newProfessor = new Professor(name, department);
        Professor **temp = new Professor*[professorCount + 1];
        for (int i = 0; i < professorCount; i++) {
            temp[i] = professors[i];
        }
        temp[professorCount] = newProfessor;
        delete[] professors;
        professors = temp;
        professorCount++;
    }
    void displayDetails() {
        cout << "University has the following professors:" << endl;
        if (professorCount == 0) {
            cout << "No professors available." << endl;
        } else {
            for (int i = 0; i < professorCount; i++) {
                cout << "Professor Name: " << professors[i]->name << ", Department: " << professors[i]->department << endl;
            }
        }
    }
    ~University() {
        for (int i = 0; i < professorCount; i++) {
            delete professors[i];
        }
        delete[] professors;
    }
};
int main() {
    University fastUniversity;
    int choice;
    string name, department;
    do {
        cout << "1. Add Professor" << endl;
        cout << "2. Display University Details" << endl;
        cout << "3. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter professor's name: ";
                cin.ignore();
                getline(cin, name);
                cout << "Enter professor's department: ";
                getline(cin, department);
                fastUniversity.addProfessor(name, department);
                break;
            case 2:
                fastUniversity.displayDetails();
                break;
            case 3:
                cout << "Exiting program." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 3);
    return 0;
}
